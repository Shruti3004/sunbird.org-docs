openapi: 3.0.2
info:
  title: UCI
  version: 1.0.0
  contact:
    email: admin@samagragovernance.in
servers:
  - url: http://uci-apis.ngrok.samagra.io/admin/v1
    description: Base URL
security:
  - OwnerOrgID: []
  - OwnerID: []
externalDocs:
  description: Basic guide
  url: https://github.com/Samagra-Development
tags:
- name: User Segments
  description: Endpoints related to user segments
- name: Adapter
  description: Endpoints for adaption
- name: Transformer
  description: Endpoints for transformer
- name: Conversation Logic
  description: Endpoints for conversation logic
- name: Bot
  description: Endpoints for bot

paths:

# User Segment

  /userSegment/all:
    get:
      tags:
        - User Segments
      summary: Get all user segments
      responses:
        '200':
          description: User segment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /userSegment/search:
    parameters:
      - name: name
        required: false
        schema:
          type: string
        in: query
        description: Return segment for the given user name
    get:
      tags:
        - User Segments
      summary: Search by Name
      description:
        Returns a user segments
      responses:
        '200':
          description: Get user segment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /userSegment/get:
    parameters:
      - name: page
        required: false
        schema:
          type: string
        in: query
        description: Records of the respective page
      - name: perPage
        required: false
        schema:
          type: string
        in: query
        description: Number of records per page
    get:
      tags:
        - User Segments
      summary: Get Paginated
      responses:
        '200':
          description: Get user segment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /userSegment/create:
    post:
      tags:
        - User Segments
      summary: Create a User Segment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSegments'
      responses:
        '201':
          description: User segment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /userSegment/get/{id}:
    parameters:
      - name: id
        required: true
        description: Id of the user
        in: path
        schema:
          type: string
    get:
      tags:
        - User Segments
      summary: Get single user segment by id
      description:
        Returns a single upload
      responses:
        '200':
          description: Get upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /userSegment/update:
    post:
      tags:
        - User Segments
      summary: Update by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSegments'
      responses:
        '201':
          description: User segment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /userSegment/delete/{id}:
    parameters:
      - name: id
        required: true
        description: Id of the user segment to be deleted
        in: path
        schema:
          type: string
    get:
      tags:
        - User Segments
      summary: Delete by ID
      responses:
        '200':
          description: User segment deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /userSegment/queryBuilder:
    post:
      tags:
        - User Segments
      summary: Query Builder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryBuilder'
      responses:
        '200':
          description: Query Builder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryBuilder'
        default:
          $ref: '#/components/responses/defaultResponse'

  /userSegment/addUser/{id}/phone:{phone}:
    parameters:
      - name: id
        required: true
        description: Id of the user to be registered
        in: path
        schema:
          type: string
      - name: phone
        required: true
        description: contact number of the user to br registered
        in: path
        schema:
          type: string
    get:
      tags:
        - User Segments
      summary: Add a User to registery
      responses:
        '200':
          description: Added a User for registery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'


# ADAPTER

  /adapter/create:
    post:
      tags:
        - Adapter
      summary: Create an Adapter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Adapter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /adapter/all:
    get:
      tags:
        - Adapter
      summary: Get all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /adapter/get/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Adapter
      summary: Get by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /adapter/delete/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Adapter
      summary: Delete by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /adapter/update:
    post:
      tags:
        - Adapter
      summary: Update by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Adapter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'


# TRANSFORMER

  /transformer/all:
    get:
      tags:
        - Transformer
      summary: Get all transformers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transformer'
        default:
          $ref: '#/components/responses/defaultResponse'

  /transformer/create:
    post:
      tags:
        - Transformer
      summary: Create a Transformer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transformer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /transformer/get/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Transformer
      summary: Get transformer by id
      responses:
        '200':
          description: Get single transformer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /transformer/update:
    post:
      tags:
        - Transformer
      summary: Update by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transformer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /transformer/delete/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Transformer
      summary: Delete by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /transformer/dryRun/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Transformer
      summary: Dry Run transformer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /transformer/getForms/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Transformer
      summary: Get Transformer Forms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /transformer/forms/upload:
    post:
      tags:
        - Transformer
      summary: ODK Form Upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Adapter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'


  /conversationLogic/create:
    post:
      tags:
        - Conversation Logic
      summary: Create a Conversation Logic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationLogic'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationLogic'
        default:
          $ref: '#/components/responses/defaultResponse'

  /conversationLogic/all:
    get:
      tags:
        - Conversation Logic
      summary: Get all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /conversationLogic/get/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Conversation Logic
      summary: Get by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /conversationLogic/delete/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Conversation Logic
      summary: Delete by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /conversationLogic/update:
    post:
      tags:
        - Conversation Logic
      summary: Update by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationLogic'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationLogic'
        default:
          $ref: '#/components/responses/defaultResponse'


  /bot/create:
    post:
      tags:
        - Bot
      summary: Create a Bot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bot'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        default:
          $ref: '#/components/responses/defaultResponse'

  /bot/all:
    get:
      tags:
      - Bot
      summary: Get all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        default:
            $ref: '#/components/responses/defaultResponse'

  /bot/get/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Bot
      summary: Get by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /bot/start/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Bot
      summary: Start by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegments'
        default:
          $ref: '#/components/responses/defaultResponse'

  /bot/getByParam:
    parameters:
      - name: startingMessage
        required: true
        schema:
          type: string
        in: query
    get:
      tags:
      - Bot
      summary: Get by Starting Message
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        default:
            $ref: '#/components/responses/defaultResponse'

  /bot/search:
    parameters:
      - name: name
        required: true
        schema:
          type: string
        in: query
    get:
      tags:
      - Bot
      summary: Search by Name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        default:
            $ref: '#/components/responses/defaultResponse'

  /bot/delete/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - Bot
      summary: Delete by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /bot/update/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
    post:
      tags:
        - Bot
      summary: Update by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bot'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        default:
          $ref: '#/components/responses/defaultResponse'

  /bot/get:
    parameters:
      - name: name
        required: false
        schema:
          type: string
        in: query
    get:
      tags:
        - Bot
      summary: Get by name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /bot/pause/{id}:
    parameters:
      - name: id
        required: true
        schema:
          type: string
        in: path
    get:
      tags:
        - Bot
      summary: Pause by Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'

  /bot/getAllUsers/{id}:
    parameters:
      - name: id
        required: true
        schema:
          type: string
        in: path
    get:
      tags:
        - Bot
      summary: Get all users for user segment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adapter'
        default:
          $ref: '#/components/responses/defaultResponse'


components:
  securitySchemes:
    OwnerOrgID:
      type: apiKey
      in: header
      name: ownerorgid
    OwnerID:
      type: apiKey
      in: header
      name: ownerid

  schemas:

    UserSegments:
      type: object
      properties:
        name:
          type: string
        all:
          type: object
          properties:
            type:
              type: string
            config:
              type: object
              properties:
                cadence:
                  type: object
                  properties:
                    retries:
                      type: integer
                    retries-interval:
                      type: integer
                    timeout:
                      type: integer
                    concurrent:
                      type: boolean
                    pagination:
                      type: boolean
                    perPage:
                      type: integer
                credentials:
                  type: object
                  properties:
                    variable:
                      type: string
                    vault:
                      type: string
                gql:
                  type: string
                pageParam:
                  type: string
        byID:
          type: object
          properties:
            type:
              type: string
            config:
              type: object
              properties:
                pageParam:
                  type: string
                cadence:
                  type: object
                  properties:
                    concurrent:
                      type: boolean
                    pagination:
                      type: boolean
                    perPage:
                      type: integer
                    retries:
                      type: integer
                    retries-interval:
                      type: integer
                    timeout:
                      type: integer
                verificationParams:
                  type: object
                  properties:
                    id:
                      type: string
                credentials:
                  type: object
                  properties:
                    vault:
                      type: string
                    variable:
                      type: string
                gql:
                  type: string
        byPhone:
          type: object
          properties:
            type:
              type: string
            config:
              type: object
              properties:
                pageParam:
                  type: string
                cadence:
                  type: object
                  properties:
                    retries-interval:
                      type: integer
                    timeout:
                      type: integer
                    concurrent:
                      type: boolean
                    pagination:
                      type: boolean
                    perPage:
                      type: integer
                    retries:
                      type: integer
                verificationParams:
                  type: object
                  properties:
                    phoneNo:
                      type: string
                credentials:
                  type: object
                  properties:
                    variable:
                      type: string
                    vault:
                      type: string
                gql:
                  type: string
        category:
          type: string
        count:
          type: integer

    QueryBuilder:
      type: object
      properties:
        owner:
          type: string
        data:
          type: object
          properties:
            userLocation:
              type: array
              items:
                type: object
                properties:
                  state:
                    type: string
                  district:
                    type: string
                  block:
                    type: string
            roles:
              type: array
              items: {}
              example:
                - PUBLIC
            userType:
              type: object
              properties:
                type:
                  type: string
            framework:
              type: object
              properties:
                board:
                  type: array
                  items: {}
                  example:
                    - State Board 3
                gradeLevel:
                  type: array
                  items: {}
                  example:
                    - 1

    Adapter:
      type: object
      properties:
        data:
          type: object
          properties:
            channel:
              type: string
            provider:
              type: string
            config:
              type: object
              properties:
                phone:
                  type: string
                HSM_ID:
                  type: string
                2WAY:
                  type: string
                credentials:
                  type: object
                  properties:
                    vault:
                      type: string
                    variable:
                      type: string

    Transformer:
      type: object
      properties:
        data:
          type: object
          properties:
            tags:
              type: array
              items: {}
              example:
                - generic
            service:
              type: object
              properties:
                type:
                  type: string
                config:
                  type: object
                  properties:
                    cadence:
                      type: object
                      properties:
                        concurrent:
                          type: boolean
                        retries:
                          type: integer
                        retries-interval:
                          type: integer
                        timeout:
                          type: integer
                    credentials:
                      type: object
                      properties:
                        variable:
                          type: string
                        vault:
                          type: string
                    url:
                      type: string
            config:
              type: object
              properties:
                validation:
                  type: object
                  properties:
                    in:
                      type: string
                    out:
                      type: string
            name:
              type: string

    ConversationLogic:
      type: object
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            transformers:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
            adapter:
              type: string

    Bot:
      type: object
      properties:
        data:
          type: object
          properties:
            startingMessage:
              type: string
            name:
              type: string
            logic:
              type: array
              items: {}
              example:
                - 4dff85a2-fb23-4cd9-818a-120dc3ef4d64

    Info:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Message in the info
        type:
          type: string
          enum:
            - INFO
            - ERROR
          description: Denotes if info was created on error

  responses:
    defaultResponse:
      description: Some error occured. Check the "message"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Info'